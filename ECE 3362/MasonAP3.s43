;-------------------------------------------------------------------------------
; 
;       Date:           Oct. 16, 2016
;       Written by:     Amelia Mason
;       Adapted from:   Dr. Michael Helm
;       Assembler/IDE:  IAR Embedded Workbench 5.5
;
;       HW I/O assignments:
;       P1.0    (output) Segment A (active low) drives display board
;       P1.1    (output) Segment B (active low) drives display board
;       P1.2    (output) Segment C (active low) drives display board
;       P1.3    (output) Segment D (active low) drives display board
;       P1.4    (output) Segment E (active low) drives display board
;       P1.5    (output) Segment F (active low) drives display board
;       P1.6    (output) Segment G (active low) drives display board
;       P1.7    (output) Segment DP (active low) drives display board
;
;       P2.0    (output) Digit 3 (active low) MSdigit (leftmost)
;       P2.1    (output) Digit 2 (active low)  
;       P2.2    (output) Digit 1 (active low)  
;       P2.3    (output) Digit 0 (active low) LSdigit (rightmost)
;       P2.4    (output) Other - (dots - colon)
;       P2.5    (input)  Pushbutton 0 (active low) (rightmost)
;       P2.6    (input)  Pushbutton 1 (active low) (middle)
;       P2.7    (input)  Pushbutton 2 (active low) (leftmost)
;
;
;
;*******************************************************************************
#include  "msp430g2553.h"
;-------------------------------------------------------------------------------
; Definition of Constants
;-------------------------------------------------------------------------------

LONG_DELAY      EQU     65535  ; max 16 bit value (FFFFh)
;LONG_DELAY      EQU     6000  ; 
;LONG_DELAY      EQU     600  ; 
SHORT_DELAY     EQU     5000  ; 

SEG_A         EQU     %00000001 ; Port pin position P1.0
SEG_B         EQU     %00000010 ; Port pin position P1.1
SEG_C         EQU     %00000100 ; Port pin position P1.2
SEG_D         EQU     %00001000 ; Port pin position P1.3
SEG_E         EQU     %00010000 ; Port pin position P1.4
SEG_F         EQU     %00100000 ; Port pin position P1.5
SEG_G         EQU     %01000000 ; Port pin position P1.6
SEG_DP        EQU     %10000000 ; Port pin position P1.7

;since inverted pattern is needed for the display, this defines inverse pattern
SEG_A_N       EQU     ~SEG_A ; Port pin position P1.0
SEG_B_N       EQU     ~SEG_B ; Port pin position P1.1
SEG_C_N       EQU     ~SEG_C ; Port pin position P1.2
SEG_D_N       EQU     ~SEG_D ; Port pin position P1.3
SEG_E_N       EQU     ~SEG_E ; Port pin position P1.4
SEG_F_N       EQU     ~SEG_F ; Port pin position P1.5
SEG_G_N       EQU     ~SEG_G ; Port pin position P1.6
SEG_DP_N      EQU     ~SEG_DP ; Port pin position P1.7

;NOTE: display board requires INVERSE of these patterns due to Active LOW
DIG_3         EQU     %00000001 ; Port pin position P2.0 (MSdigit)
DIG_2         EQU     %00000010 ; Port pin position P2.1
DIG_1         EQU     %00000100 ; Port pin position P2.2
DIG_0         EQU     %00001000 ; Port pin position P2.3(LSdigit)
DP_COM        EQU     %00010000 ; Port pin position P2.4

;since inverted pattern is needed for the display, this defines inverse pattern
DIG_3_N       EQU     ~DIG_3 ; Port pin position P2.0 (MSdigit)
DIG_2_N       EQU     ~DIG_2 ; Port pin position P2.1
DIG_1_N       EQU     ~DIG_1 ; Port pin position P2.2
DIG_0_N       EQU     ~DIG_0 ; Port pin position P2.3(LSdigit)
DP_COM_N      EQU     ~DP_COM ; Port pin position P2.4


PB_0         EQU     %00100000 ; Port pin position P2.5
PB_1         EQU     %10000000 ; Port pin position P2.6
PB_2         EQU     %01000000 ; Port pin position P2.7


SEG_PORT         EQU     P1OUT
DIG_PORT         EQU     P2OUT
PB_PORT          EQU     P2IN

;NOTE: display bd requires the INVERSE of these patterns due to Active LOW
ONE             EQU     %00000110
TWO             EQU     %01011011
THREE           EQU     %01001111
FOUR            EQU     %01100110
FIVE            EQU     %01101101
SIX             EQU     %01111101
SEVEN           EQU     %00000111
EIGHT           EQU     %01111111
NINE            EQU     %01100111
ZERO            EQU     %00111111
DASH		EQU	%01000000
DECP            EQU     %11000000
COLON           EQU     %00000011

;since inverted pattern is needed for the display, this defines inverse pattern
ONE_N           EQU     ~%00000110
TWO_N           EQU     ~%01011011
THREE_N         EQU     ~%01001111
FOUR_N          EQU     ~%01100110
FIVE_N          EQU     ~%01101101
SIX_N           EQU     ~%01111101
SEVEN_N         EQU     ~%00000111
EIGHT_N         EQU     ~%01111111
NINE_N          EQU     ~%01100111
ZERO_N          EQU     ~%00111111
DASH_N		EQU	~%01000000
DECP_N          EQU     ~%11000000
COLON_N         EQU     ~%00000011

;-------------------------------------------------------------------------------
; Definition of Variables
;-------------------------------------------------------------------------------

            ORG   0200h     ; beginning of RAM space (necessary statement)
            
TotalINTCount0 DW  0         ;global variable used by Timer0 ISR  

TotalINTCount1 DW  0         ;global variable used by Timer1 ISR   

DisplayValue  DW  0         ; contains 4 digit value to display in BCD format
                            ; BCDdig3 | BCDdig2  | BCDdig1  | BCDdig0
                            ; xxxx      xxxx       xxxx       xxxx

CurrentDigitPos  DB  0      ;global variable used by WriteDigitToDisplay ISR
                            ; holds digit position of current digit to write

;-------------------------------------------------------------------------------
            ORG     0C000h                  ; Program Reset (prog memory start)
                                            ; this is Program memory start 
                                            ; address for MSP430G2553 (16K)
;-------------------------------------------------------------------------------
RESET       mov.w   #0400h,SP        ; Initialize stackpointer(to end of RAM +1)
                                     ; RAM is 512 bytes, last position is 3FFh
                                     
StopWDT     mov.w   #WDTPW+WDTHOLD,&WDTCTL  ; Stop WDT

SetupP1     mov.b   #0FFh, &P1DIR  ; all as outputs          
            mov.b   #01Fh, &P2DIR ; all but 3 MSbits as outputs   
            
SetupP2    bis.b    #DIG_3+DIG_2+DIG_1+DIG_0+DP_COM, &P2DIR ; all outputs but
                                                            ; the PB positions
           bic.b    #PB_1+PB_2, &P2SEL   ; Clears the P2SEL bits so that 
                                        ; P2.6 and P2.7 function as GPIO pins
          
                                                                             
           ; The PushButtons are wired to P2.5,6,7 (active LOW), so we need to  
           ; turn on the internal Pullup Resistors  - this is done with P2REN
           ; register
           
           ; 
           mov.b    #PB_0+PB_1+PB_2, &P2REN    ;turn on the internal resistor
           mov.b    #PB_0+PB_1+PB_2, &P2OUT    ; set the resistor to Pullup mode
           
           ; turn off all the segments and digits
           mov.b #0FFh, &SEG_PORT
           mov.b #0FFh, &DIG_PORT
           
 
DisplayTop   ; main program loop starts here

           bit.b #PB_0, &PB_PORT
           jeq   PB_0_Pressed
           
           bit.b #PB_1, &PB_PORT
           jeq   PB_1_Pressed
           
           bit.b #PB_2, &PB_PORT
           jeq   PB_2_Pressed

           mov #0A36Ah, &DisplayValue
           jmp NothingPressed

PB_0_Pressed
           push R14
           mov #0000h, R14
           mov #0AA36h, &DisplayValue
           call #WriteNextDigitToDisplay
           pop R14
           jmp Pressed_0
           
PB_1_Pressed
           push R14
           mov #0001h, R14
           mov #0B36Bh, &DisplayValue
           call #WriteNextDigitToDisplay
           pop R14
           jmp Pressed_1

PB_2_Pressed
           push R14
           mov #0000h, R14
           mov #036AAh, &DisplayValue
           call #WriteNextDigitToDisplay
           pop R14
           jmp Pressed_2

NothingPressed  
           push R14
           mov #0000h, R14
           call #WriteNextDigitToDisplay
           pop R14

Done        
           jmp DisplayTop
           
Pressed_0
           bit.b #PB_1, &PB_PORT
           jeq   PB_1_Pressed
           
           bit.b #PB_2, &PB_PORT
           jeq   PB_2_Pressed

           jmp PB_0_Pressed
           
Pressed_1
           bit.b #PB_0, &PB_PORT
           jeq   PB_0_Pressed
           
           bit.b #PB_2, &PB_PORT
           jeq   PB_2_Pressed
           
           jmp PB_1_Pressed
           
Pressed_2
           bit.b #PB_0, &PB_PORT
           jeq   PB_0_Pressed
           
           bit.b #PB_1, &PB_PORT
           jeq   PB_1_Pressed
           
           jmp PB_2_Pressed

;-------------------------------------------------------------------------------
;           End of main code
;-------------------------------------------------------------------------------                                            
                                           
;-------------------------------------------------------------------------------
;           Subroutines
;------------------------------------------------------------------------------- 

;-------------------------------------------------------------------------------
; WriteNextDigitToDisplay
;  passed in - DisplayValue, CurrentDigitPos 
;  returned - nothing
;  accomplishes - Writes next digit to the expansion bd display
;  uses: R15, global variable CurrentDigitPos,
;-------------------------------------------------------------------------------
WriteNextDigitToDisplay
    push R15     ; save R15 since we use it here
    
    cmp #0, &CurrentDigitPos
    jeq  WriteDig0
    
    cmp #1, &CurrentDigitPos
    jeq  WriteDig1
    
    cmp #2, &CurrentDigitPos
    jeq  WriteDig2
    
    cmp #3, &CurrentDigitPos
    jeq  WriteDig3
    
    cmp #4, &CurrentDigitPos
    jeq  WriteColon
    
    ; invalid case - CurrentDigPos is invalid value
    clr &CurrentDigitPos   ; reset it
    jmp DoneWithDigitWriteTotally  ; get out of here
    
WriteDig0
    mov.b #0FFh, DIG_PORT
    mov &DisplayValue, R15  ; make a copy
    and #000Fh, R15         ; mask out all but Dig 0
    ; use the value in R15 as an offset or index into SegPatternTable
    add #SegPatternTable, R15  ; R15 now points to correct Seg pattern to write
    mov.b @R15, SEG_PORT       ; set up the pattern to write
    mov.b #DIG_0_N, DIG_PORT
    jmp DoneWithDigitWrite
    
WriteDig1
    mov.b #0FFh, DIG_PORT
    mov &DisplayValue, R15  ; make a copy
    and #00F0h, R15         ; mask out all but Dig 1
    rra R15                     ; get the value into LSnibble position
    rra R15
    rra R15
    rra R15
    ; use the value in R15 as an offset or index into SegPatternTable
    add #SegPatternTable, R15  ; R15 now points to correct Seg pattern to write
    mov.b @R15, SEG_PORT       ; set up the pattern to write
    mov.b #DIG_1_N, DIG_PORT
    jmp DoneWithDigitWrite
    
WriteDig2
    mov.b #0FFh, DIG_PORT
    mov &DisplayValue, R15  ; make a copy
    and #0F00h, R15         ; mask out all but Dig 2
    swpb R15                    ; get the value into LSnibble position
    ; use the value in R15 as an offset or index into SegPatternTable
    add #SegPatternTable, R15  ; R15 now points to correct Seg pattern to write
    mov.b @R15, SEG_PORT       ; set up the pattern to write
    mov.b #DIG_2_N, DIG_PORT
    jmp DoneWithDigitWrite
    
WriteDig3
    mov.b #0FFh, DIG_PORT
    mov &DisplayValue, R15  ; make a copy
    and #0F000h, R15         ; mask out all but Dig 3
    swpb R15
    rra R15                     ; get the value into LSnibble position
    rra R15
    rra R15
    rra R15    
    ; use the value in R15 as an offset or index into SegPatternTable
    add #SegPatternTable, R15  ; R15 now points to correct Seg pattern to write
    mov.b @R15, SEG_PORT       ; set up the pattern to write
    mov.b #DIG_3_N, DIG_PORT
    jmp DoneWithDigitWrite

WriteColon
    cmp #0001h, R14
    jne DoneWithDigitWrite
    
    mov.b #0FFh, DIG_PORT
    mov.b #COLON_N, SEG_PORT
    mov.b #DP_COM_N, DIG_PORT
    jmp DoneWithDigitWrite

DoneWithDigitWrite
    inc &CurrentDigitPos   ; set up for next digit position for next time
    cmp.b #5, &CurrentDigitPos  ;have we done the last one?, time to start over
    jl   DoneWithDigitWriteTotally
    clr &CurrentDigitPos   ; reset it if we need to start over
DoneWithDigitWriteTotally    
    pop R15     ; restore R15 before returning
    ret         ; return
;-------------------------------------------------------------------------------
;  end of WriteNextDigitToDisplay
;-------------------------------------------------------------------------------



;-------------------------------------------------------------------------------
; Delay_Long
;  passed in - nothing
;  returned - nothing
;  accomplishes - long delay
;  uses: R15
;-------------------------------------------------------------------------------
Delay_Long
    push R15     ; save R15 since we use it here
DelayTopL
    mov #LONG_DELAY, R15     ;load loop counter (R15) with Long Delay constant
Loop1Long
    dec R15                     ; decrement loop counter
    jnz Loop1Long               ; Zero yet?, no decrement again

    pop R15     ; restore R15 before returning
    ret         ; return
;-------------------------------------------------------------------------------
;  end of Delay_Long
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
;           End of all Subroutines
;-------------------------------------------------------------------------------




;-------------------------------------------------------------------------------
;           End of all Interrupt Service Routines
;-------------------------------------------------------------------------------

;-------------------------------------------------------------------------------
;           Definition of Program Data Memory
;-------------------------------------------------------------------------------
            ORG   0E000h   ; this line not strictly necessary, but does force
                            ; the location of this program memory data - this is
                            ; a matter of convenience  - need to leave enough
                            ; space ahead of Interrupt Vectors for the data that
                            ; we are putting here

; usage: use SegPatternTable as base address, then offset into table for
; a specific 7-seg number (pattern) to display
SegPatternTable  ; contains patterns for each 7-seg number
     DB  ZERO_N
     DB  ONE_N
     DB  TWO_N
     DB  THREE_N
     DB  FOUR_N
     DB  FIVE_N
     DB  SIX_N
     DB  SEVEN_N
     DB  EIGHT_N
     DB  NINE_N
     DB	 DASH_N
     DB  DECP_N
     DB  COLON_N
     
; usage: use DigitPatternTable as base address, then offset into table for
; a specific digit position to display
DigitPatternTable  ; contains patterns for each digit position common selection
     DB  DIG_0_N
     DB  DIG_1_N
     DB  DIG_2_N
     DB  DIG_3_N
     DB  DP_COM_N
 
     
     


;-------------------------------------------------------------------------------
;           Interrupt Vectors
;-------------------------------------------------------------------------------

            ORG     0FFFEh                  ; MSP430 RESET Vector
            DW      RESET                   ; establishes the label RESET as 
                                            ; the starting point
            END                             ; END of all code for this program
;-------------------------------------------------------------------------------
;-------------------------------------------------------------------------------
